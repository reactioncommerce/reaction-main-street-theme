/* RTL mixins
-------------------------------------------------- */

// @mixin rtl-style($prop, $value, $inverse-prop, $default-value) {
//   #{$prop}: $value;
//
//   html[dir=rtl] & {
//     #{$inverse-prop}: $value;
//     #{$prop}: $default-value;
//   }
// }

@mixin rtl($property, $value) {
  html.rtl & {
    #{$property}: $value
  }
}
@mixin ltr($property, $value) {
  html:not(.rtl) & {
    #{$property}: $value;
  }
}

@mixin left($n) {
  @include ltr(left, $n);
  @include rtl(right, $n);
}

@mixin right($n) {
  @include ltr(right, $n);
  @include rtl(left, $n);
}

@mixin margin-left($n) {
  @include ltr(margin-left, $n);
  @include rtl(margin-right, $n);
}

@mixin margin-right($n) {
  @include ltr(margin-right, $n);
  @include rtl(margin-left, $n);
}

@mixin padding-left($n) {
  @include ltr(padding-left, $n);
  @include rtl(padding-right, $n);
}

@mixin padding-right($n) {
  @include ltr(padding-right, $n);
  @include rtl(padding-left, $n);
}

// @mixin float($n) when ($n = left) {
//   .ltr({ float: left; });
//   .rtl({ float: right; });
// }
//
// @mixin float($n) when ($n = right) {
//   .ltr({ float: right; });
//   .rtl({ float: left; });
// }
//
// @mixin float($n) when not ($n = left) and not ($n = right) {
//   float: $n;
// }
//
// @mixin clear($n) when ($n = left) {
//   .ltr({ clear: left; });
//   .rtl({ clear: right; });
// }
//
// @mixin clear($n) when ($n = right) {
//   .ltr({ clear: right; });
//   .rtl({ clear: left; });
// }
//
// @mixin clear($n) when not ($n = left) and not ($n = right) {
//   clear: $n;
// }
//
// @mixin text-align($n) when ($n = left) {
//   .ltr({ text-align: left; });
//   .rtl({ text-align: right; });
// }
//
// @mixin text-align($n) when ($n = right) {
//   .ltr({ text-align: right; });
//   .rtl({ text-align: left; });
// }
//
// @mixin text-align($n) when not ($n = left) and not ($n = right) {
//   text-align: $n;
// }
